import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import sqlite3
import datetime

# –†–∞—Å—á–µ—Ç BRM –ø–æ –º–µ—Ç–æ–¥–∏–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def compute_brm(weight_kg: float, height_cm: float, age_years: int, activity_level_text: str, gender_text: str) -> float:
    # –ú–∞–ø–ø–∏–Ω–≥ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
    activity_map = {
        "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è": 1.725,  # —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ very active
        "–í—ã—Å–æ–∫–∞—è": 1.55,
        "–°—Ä–µ–¥–Ω—è—è": 1.375,
        "–ù–∏–∑–∫–∞—è": 1.2,
    }

    activity = activity_map.get(activity_level_text, 1.2)

    gender = "man" if gender_text.lower().startswith("–º—É–∂") or gender_text.lower() == "man" else "woman"

    if gender == 'man':
        brm = ((10 * weight_kg) + (6.25 * height_cm) - (5 * age_years) + 5) * activity
    else:
        brm = ((10 * weight_kg) + (6.25 * height_cm) - (5 * age_years) - 161) * activity

    return float(brm)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
HEIGHT, WEIGHT, ACTIVITY_LEVEL, GENDER, YEARS_EXPERIENCE, GOAL = range(6)


# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—É
def init_db():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            height REAL,
            weight REAL,
            activity_level TEXT,
            gender TEXT,
            years_experience INTEGER,
            brm REAL,
            goal TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ user_id
    cursor.execute('''
        CREATE INDEX IF NOT EXISTS idx_user_id ON users(user_id)
    ''')

    conn.commit()
    conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def save_user_to_db(user_data):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–Ω–∫–µ—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('SELECT id FROM users WHERE user_id = ? ORDER BY created_at DESC LIMIT 1',
                   (user_data['user_id'],))
    existing_user = cursor.fetchone()

    # –†–∞—Å—á–µ—Ç BRM –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
    brm_value = compute_brm(
        weight_kg=float(user_data['weight']),
        height_cm=float(user_data['height']),
        age_years=int(user_data['years_experience']),
        activity_level_text=str(user_data['activity_level']),
        gender_text=str(user_data['gender'])
    )

    if existing_user:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        cursor.execute('''
            UPDATE users SET
            username = ?, height = ?, weight = ?, activity_level = ?, 
            gender = ?, years_experience = ?, brm = ?, goal = ?, updated_at = CURRENT_TIMESTAMP
            WHERE id = ?
        ''', (
            user_data['username'],
            user_data['height'],
            user_data['weight'],
            user_data['activity_level'],
            user_data['gender'],
            user_data['years_experience'],
            brm_value,
            user_data.get('goal'),
            existing_user[0]
        ))
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        cursor.execute('''
            INSERT INTO users 
            (user_id, username, height, weight, activity_level, gender, years_experience, brm, goal)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            user_data['user_id'],
            user_data['username'],
            user_data['height'],
            user_data['weight'],
            user_data['activity_level'],
            user_data['gender'],
            user_data['years_experience'],
            brm_value,
            user_data.get('goal')
        ))

    conn.commit()
    conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –∫–∞–∂–¥–æ–≥–æ)
def get_all_users():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT u1.* FROM users u1
        INNER JOIN (
            SELECT user_id, MAX(created_at) as max_date 
            FROM users 
            GROUP BY user_id
        ) u2 ON u1.user_id = u2.user_id AND u1.created_at = u2.max_date
        ORDER BY u1.created_at DESC
    ''')
    users = cursor.fetchall()
    conn.close()
    return users


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
def get_user_by_id(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT * FROM users 
        WHERE user_id = ? 
        ORDER BY created_at DESC 
        LIMIT 1
    ''', (user_id,))
    user = cursor.fetchone()
    conn.close()
    return user


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∞–Ω–∫–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_all_user_forms(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT * FROM users 
        WHERE user_id = ? 
        ORDER BY created_at DESC
    ''', (user_id,))
    forms = cursor.fetchall()
    conn.close()
    return forms


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–Ω–∫–µ—Ç–∞
    user_data = get_user_by_id(user.id)

    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
        "–Ø –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –∞–Ω—Ç—Ä–æ–ø–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/form - –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã\n"
        "/show_me - –ø–æ–∫–∞–∑–∞—Ç—å –º–æ—é –∞–Ω–∫–µ—Ç—É\n"
        "/show_all - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–Ω–∫–µ—Ç—ã\n"
        "/my_forms - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–æ–∏ –∞–Ω–∫–µ—Ç—ã\n"
        "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )

    if user_data:
        welcome_text += f"\n\n‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞ –æ—Ç {user_data[8]}"
        welcome_text += "\n–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –ø–æ–≤—Ç–æ—Ä–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /form"

    await update.message.reply_text(welcome_text)


# –ù–∞—á–∞–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
async def start_form(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∞–Ω–∫–µ—Ç—ã
    previous_forms = get_all_user_forms(user.id)

    if previous_forms:
        await update.message.reply_text(
            "üìù –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –ø–æ–≤—Ç–æ—Ä–Ω–æ!\n"
            f"–£ –≤–∞—Å —É–∂–µ {len(previous_forms)} –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç.\n"
            "–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):"
        )
    else:
        await update.message.reply_text(
            "–î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É! üìù\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):"
        )

    return HEIGHT


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ—Å—Ç–∞
async def get_height(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        height = float(update.message.text)
        if height < 50 or height > 250:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç (50-250 —Å–º):")
            return HEIGHT
        context.user_data['height'] = height
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
        return WEIGHT
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —Ä–æ—Å—Ç–∞:")
        return HEIGHT


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Å–∞
async def get_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        weight = float(update.message.text)
        if weight < 20 or weight > 300:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–µ—Å (20-300 –∫–≥):")
            return WEIGHT
        context.user_data['weight'] = weight

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        activity_keyboard = [
            [KeyboardButton("–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è"), KeyboardButton("–í—ã—Å–æ–∫–∞—è")],
            [KeyboardButton("–°—Ä–µ–¥–Ω—è—è"), KeyboardButton("–ù–∏–∑–∫–∞—è")]
        ]
        reply_markup = ReplyKeyboardMarkup(activity_keyboard, resize_keyboard=True)

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
            reply_markup=reply_markup
        )
        return ACTIVITY_LEVEL
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –≤–µ—Å–∞:")
        return WEIGHT


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async def get_activity_level(update: Update, context: ContextTypes.DEFAULT_TYPE):
    activity_level = update.message.text
    valid_levels = ["–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è", "–í—ã—Å–æ–∫–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–ù–∏–∑–∫–∞—è"]

    if activity_level not in valid_levels:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
        return ACTIVITY_LEVEL

    context.user_data['activity_level'] = activity_level

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª–∞
    gender_keyboard = [
        [KeyboardButton("–ú—É–∂—Å–∫–æ–π"), KeyboardButton("–ñ–µ–Ω—Å–∫–∏–π")]
    ]
    reply_markup = ReplyKeyboardMarkup(gender_keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
        reply_markup=reply_markup
    )
    return GENDER


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–∞
async def get_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['gender'] = update.message.text
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç?")
    return YEARS_EXPERIENCE


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
async def get_years_experience(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        years = int(update.message.text)
        if years < 1 or years > 120:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (1-120 –ª–µ—Ç):")
            return YEARS_EXPERIENCE

        context.user_data['years_experience'] = years
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–ª—å (–¥–µ—Ñ–∏—Ü–∏—Ç/–ø—Ä–æ—Ñ–∏—Ü–∏—Ç)
        goal_keyboard = [[KeyboardButton("–°–Ω–∏–∑–∏—Ç—å –≤–µ—Å (–¥–µ—Ñ–∏—Ü–∏—Ç)"), KeyboardButton("–ù–∞–±—Ä–∞—Ç—å –≤–µ—Å (–ø—Ä–æ—Ñ–∏—Ü–∏—Ç)")]]
        reply_markup = ReplyKeyboardMarkup(goal_keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–ö–∞–∫–æ–≤–∞ –≤–∞—à–∞ —Ü–µ–ª—å? –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç:",
            reply_markup=reply_markup
        )
        return GOAL
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞:")
        return YEARS_EXPERIENCE
async def get_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    goal_text = update.message.text
    if "—Å–Ω–∏–∑–∏—Ç—å" in goal_text.lower():
        context.user_data['goal'] = "–¥–µ—Ñ–∏—Ü–∏—Ç"
    elif "–Ω–∞–±—Ä–∞—Ç—å" in goal_text.lower():
        context.user_data['goal'] = "–ø—Ä–æ—Ñ–∏—Ü–∏—Ç"
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: —Å–Ω–∏–∑–∏—Ç—å –∏–ª–∏ –Ω–∞–±—Ä–∞—Ç—å –≤–µ—Å")
        return GOAL

    user = update.message.from_user

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–∫–ª—é—á–∞—è —Ü–µ–ª—å
    user_data = {
        'user_id': user.id,
        'username': user.username,
        'height': context.user_data['height'],
        'weight': context.user_data['weight'],
        'activity_level': context.user_data['activity_level'],
        'gender': context.user_data['gender'],
        'years_experience': context.user_data['years_experience'],
        'goal': context.user_data['goal'],
    }

    save_user_to_db(user_data)

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç—ã
    saved_user = get_user_by_id(user.id)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [KeyboardButton("/show_me"), KeyboardButton("/my_forms")],
        [KeyboardButton("/form"), KeyboardButton("/show_all")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "‚úÖ –ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n"
        f"üìÖ –î–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: {saved_user[8]}\n\n"
        "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"üìè –†–æ—Å—Ç: {context.user_data['height']} —Å–º\n"
        f"‚öñÔ∏è –í–µ—Å: {context.user_data['weight']} –∫–≥\n"
        f"üèÉ –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {context.user_data['activity_level']}\n"
        f"üë§ –ü–æ–ª: {context.user_data['gender']}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {context.user_data['years_experience']} –ª–µ—Ç\n"
        f"üéØ –¶–µ–ª—å: {context.user_data['goal']}",
        reply_markup=reply_markup
    )

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    return ConversationHandler.END


# –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    context.user_data.clear()
    return ConversationHandler.END


# –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–Ω–∫–µ—Ç—É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def show_me(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_data = get_user_by_id(user.id)

    if user_data:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ò–ú–¢ (weight[4] / (height[3] –≤ –º–µ—Ç—Ä–∞—Ö)^2)
        bmi = user_data[4] / ((user_data[3] / 100) ** 2)

        await update.message.reply_text(
            "üìã –í–∞—à–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∞–Ω–∫–µ—Ç–∞:\n\n"
            f"üìÖ –î–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: {user_data[8]}\n"
            f"‚úèÔ∏è –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {user_data[9]}\n"
            f"üìè –†–æ—Å—Ç: {user_data[3]} —Å–º\n"
            f"‚öñÔ∏è –í–µ—Å: {user_data[4]} –∫–≥\n"
            f"üìä –ò–ú–¢: {bmi:.1f}\n"
            f"üèÉ –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {user_data[5]}\n"
            f"üë§ –ü–æ–ª: {user_data[6]}\n"
            f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user_data[7]} –ª–µ—Ç\n\n"
            "–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –≤–∞—à–∏ –∞–Ω–∫–µ—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_forms"
        )
    else:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç.\n"
            "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /form"
        )


# –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def show_my_forms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    forms = get_all_user_forms(user.id)

    if not forms:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç.\n"
            "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /form"
        )
        return

    response = f"üìä –í—Å–µ –≤–∞—à–∏ –∞–Ω–∫–µ—Ç—ã ({len(forms)}):\n\n"

    for i, form in enumerate(forms, 1):
        height_cm = float(form[3])
        weight_kg = float(form[4])
        bmi = weight_kg / ((height_cm / 100) ** 2)
        response += (
                f"üìã –ê–Ω–∫–µ—Ç–∞ #{i}:\n"
                f"  üìÖ –î–∞—Ç–∞: {form[8]}\n"
                f"  üìè –†–æ—Å—Ç: {form[3]} —Å–º\n"
                f"  ‚öñÔ∏è –í–µ—Å: {form[4]} –∫–≥\n"
                f"  üìä –ò–ú–¢: {bmi:.1f}\n"
                f"  üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {form[5]}\n"
                f"  üë§ –ü–æ–ª: {form[6]}\n"
                f"  üéÇ –í–æ–∑—Ä–∞—Å—Ç: {form[7]} –ª–µ—Ç\n"
                "‚îÄ" * 30 + "\n"
        )

    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if len(response) > 4096:
        for x in range(0, len(response), 4096):
            await update.message.reply_text(response[x:x + 4096])
    else:
        await update.message.reply_text(response)


# –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–Ω–∫–µ—Ç—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
async def show_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = get_all_users()

    if not users:
        await update.message.reply_text("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∫–µ—Ç.")
        return

    response = f"üìä –í—Å–µ –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({len(users)}):\n\n"

    for user in users:
        height_cm = float(user[3])
        weight_kg = float(user[4])
        bmi = weight_kg / ((height_cm / 100) ** 2)
        response += (
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user[1]}\n"
                f"  üìÖ –î–∞—Ç–∞: {user[8]}\n"
                f"  üìè –†–æ—Å—Ç: {user[3]} —Å–º\n"
                f"  ‚öñÔ∏è –í–µ—Å: {user[4]} –∫–≥\n"
                f"  üìä –ò–ú–¢: {bmi:.1f}\n"
                f"  üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user[5]}\n"
                f"  üë§ –ü–æ–ª: {user[6]}\n"
                f"  üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user[7]} –ª–µ—Ç\n"
                "‚îÄ" * 30 + "\n"
        )

    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if len(response) > 4096:
        for x in range(0, len(response), 4096):
            await update.message.reply_text(response[x:x + 4096])
    else:
        await update.message.reply_text(response)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–º–∞–Ω–¥—ã show
async def handle_show_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()

    if text.startswith('show all') or text == 'all':
        await show_all(update, context)
    elif text.startswith('show me') or '–º–æ—è' in text:
        await show_me(update, context)
    elif '–º–æ–∏ –∞–Ω–∫–µ—Ç—ã' in text or 'my forms' in text:
        await show_my_forms(update, context)
    else:
        await update.message.reply_text(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "/form - –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É\n"
            "/show_me - –º–æ—è –∞–Ω–∫–µ—Ç–∞\n"
            "/my_forms - –≤—Å–µ –º–æ–∏ –∞–Ω–∫–µ—Ç—ã\n"
            "/show_all - –≤—Å–µ –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        )


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token("8436312586:AAF7yu9aH20QJhCmj9yxJw54y-yvS9oOJqE").build()

    # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è –∞–Ω–∫–µ—Ç—ã
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('form', start_form)],
        states={
            HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_height)],
            WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_weight)],
            ACTIVITY_LEVEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_activity_level)],
            GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_gender)],
            YEARS_EXPERIENCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_years_experience)],
            GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_goal)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("show_me", show_me))
    application.add_handler(CommandHandler("show_all", show_all))
    application.add_handler(CommandHandler("my_forms", show_my_forms))
    application.add_handler(conv_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ show
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_show_command))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == '__main__':
    main()