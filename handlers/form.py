from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes, ConversationHandler

from utils.states import HEIGHT, WEIGHT, ACTIVITY_LEVEL, GENDER, YEARS_EXPERIENCE, GOAL
from utils.calculations import compute_brm, parse_height, parse_weight, validate_activity, normalize_gender, parse_age
from database.DataBase import save_user_to_db, get_user_by_id
from utils import texts
from Keyboards.keyboards import *


async def start_form(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É! üìù\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):"
    )
    return HEIGHT


async def get_height(update: Update, context: ContextTypes.DEFAULT_TYPE):
    height = parse_height(update.message.text)
    if height is None:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç (50-250 —Å–º):")
        return HEIGHT
    context.user_data['height'] = height
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
    return WEIGHT


async def get_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    weight = parse_weight(update.message.text)
    if weight is None:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–µ—Å (20-300 –∫–≥):")
        return WEIGHT
    context.user_data['weight'] = weight

    activity_keyboard = [
        [KeyboardButton("–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è"), KeyboardButton("–í—ã—Å–æ–∫–∞—è")],
        [KeyboardButton("–°—Ä–µ–¥–Ω—è—è"), KeyboardButton("–ù–∏–∑–∫–∞—è")],
        [KeyboardButton("/cancel")]
    ]
    reply_markup = ReplyKeyboardMarkup(activity_keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=reply_markup)
    return ACTIVITY_LEVEL


async def get_activity_level(update: Update, context: ContextTypes.DEFAULT_TYPE):
    activity_level = validate_activity(update.message.text)
    if activity_level is None:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
        return ACTIVITY_LEVEL
    context.user_data['activity_level'] = activity_level

    gender_keyboard = [
        [KeyboardButton("–ú—É–∂—Å–∫–æ–π"), KeyboardButton("–ñ–µ–Ω—Å–∫–∏–π")],
        [KeyboardButton("/cancel")]
    ]
    reply_markup = ReplyKeyboardMarkup(gender_keyboard, resize_keyboard=True)
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=reply_markup)
    return GENDER


async def get_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    gender = normalize_gender(update.message.text)
    if gender is None:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª –∫–Ω–æ–ø–∫–æ–π: –ú—É–∂—Å–∫–æ–π –∏–ª–∏ –ñ–µ–Ω—Å–∫–∏–π")
        return GENDER
    context.user_data['gender'] = gender
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç?")
    return YEARS_EXPERIENCE


async def get_years_experience(update: Update, context: ContextTypes.DEFAULT_TYPE):
    years = parse_age(update.message.text)
    if years is None:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (1-120 –ª–µ—Ç):")
        return YEARS_EXPERIENCE
    context.user_data['years_experience'] = years

    goal_keyboard = [
        [KeyboardButton("–°–Ω–∏–∑–∏—Ç—å –≤–µ—Å (–¥–µ—Ñ–∏—Ü–∏—Ç)"), KeyboardButton("–ù–∞–±—Ä–∞—Ç—å –≤–µ—Å (–ø—Ä–æ—Ñ–∏—Ü–∏—Ç)")],
        [KeyboardButton("/cancel")]
    ]
    reply_markup = ReplyKeyboardMarkup(goal_keyboard, resize_keyboard=True)
    await update.message.reply_text("–ö–∞–∫–æ–≤–∞ –≤–∞—à–∞ —Ü–µ–ª—å? –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=reply_markup)
    return GOAL


async def get_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    goal_text = update.message.text
    if "—Å–Ω–∏–∑–∏—Ç—å" in goal_text.lower():
        context.user_data['goal'] = "–¥–µ—Ñ–∏—Ü–∏—Ç"
    elif "–Ω–∞–±—Ä–∞—Ç—å" in goal_text.lower():
        context.user_data['goal'] = "–ø—Ä–æ—Ñ–∏—Ü–∏—Ç"
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: —Å–Ω–∏–∑–∏—Ç—å –∏–ª–∏ –Ω–∞–±—Ä–∞—Ç—å –≤–µ—Å")
        return GOAL

    user = update.message.from_user

    brm_value = compute_brm(
        weight_kg=float(context.user_data['weight']),
        height_cm=float(context.user_data['height']),
        age_years=int(context.user_data['years_experience']),
        activity_level_text=str(context.user_data['activity_level']),
        gender_text=str(context.user_data['gender'])
    )

    user_data = {
        'user_id': user.id,
        'username': user.username,
        'height': context.user_data['height'],
        'weight': context.user_data['weight'],
        'activity_level': context.user_data['activity_level'],
        'gender': context.user_data['gender'],
        'years_experience': context.user_data['years_experience'],
        'goal': context.user_data['goal'],
        'brm': brm_value,
    }

    save_user_to_db(user_data)

    saved_user = get_user_by_id(user.id)

    keyboard = [
        [KeyboardButton("/show_me"), KeyboardButton("/my_forms")],
        [KeyboardButton("/form"), KeyboardButton("/show_all")],
        [KeyboardButton("/clear_last"), KeyboardButton("/clear_all")],
        [KeyboardButton("/cancel")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "‚úÖ –ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n"
        f"üìÖ –î–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: {saved_user[8]}\n\n"
        "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"üìè –†–æ—Å—Ç: {context.user_data['height']} —Å–º\n"
        f"‚öñÔ∏è –í–µ—Å: {context.user_data['weight']} –∫–≥\n"
        f"üèÉ –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {context.user_data['activity_level']}\n"
        f"üë§ –ü–æ–ª: {context.user_data['gender']}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {context.user_data['years_experience']} –ª–µ—Ç\n"
        f"üéØ –¶–µ–ª—å: {context.user_data['goal']}",
        reply_markup=main_keyboard
    )

    try:
        if context.user_data['goal'] == '–¥–µ—Ñ–∏—Ü–∏—Ç':
            await update.message.reply_text(getattr(texts, 'text01', ''))
        else:
            await update.message.reply_text(getattr(texts, 'text02', ''))
    except Exception:
        pass

    context.user_data.clear()
    return GOAL


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    keyboard = [
        [KeyboardButton("/show_me"), KeyboardButton("/my_forms")],
        [KeyboardButton("/form"), KeyboardButton("/show_all")],
        [KeyboardButton("/clear_last"), KeyboardButton("/clear_all")],
        [KeyboardButton("/cancel")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=reply_markup)
    return ConversationHandler.END


