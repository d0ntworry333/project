from telegram import Update
from telegram.ext import ContextTypes

from database.DataBase import get_user_by_id, get_all_user_forms, get_all_users, delete_last_user_form, delete_all_user_forms
from error_solutions import send_long_message


async def show_me(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_data = get_user_by_id(user.id)
    if user_data:
        bmi = float(user_data[4]) / ((float(user_data[3]) / 100) ** 2)
        await update.message.reply_text(
            "üìã –í–∞—à–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∞–Ω–∫–µ—Ç–∞:\n\n"
            f"üìÖ –î–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: {user_data[8]}\n"
            f"‚úèÔ∏è –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {user_data[9]}\n"
            f"üìè –†–æ—Å—Ç: {user_data[3]} —Å–º\n"
            f"‚öñÔ∏è –í–µ—Å: {user_data[4]} –∫–≥\n"
            f"üìä –ò–ú–¢: {bmi:.1f}\n"
            f"üèÉ –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {user_data[5]}\n"
            f"üë§ –ü–æ–ª: {user_data[6]}\n"
            f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user_data[7]} –ª–µ—Ç\n\n"
            "–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –≤–∞—à–∏ –∞–Ω–∫–µ—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_forms"
        )
    else:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç.\n"
            "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /form"
        )


async def show_my_forms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    forms = get_all_user_forms(user.id)
    if not forms:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç.\n"
            "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /form"
        )
        return
    response = f"üìä –í—Å–µ –≤–∞—à–∏ –∞–Ω–∫–µ—Ç—ã ({len(forms)}):\n\n"
    for i, form in enumerate(forms, 1):
        height_cm = float(form[3])
        weight_kg = float(form[4])
        bmi = weight_kg / ((height_cm / 100) ** 2)
        response += (
            f"üìã –ê–Ω–∫–µ—Ç–∞ #{i}:\n"
            f"  üìÖ –î–∞—Ç–∞: {form[8]}\n"
            f"  üìè –†–æ—Å—Ç: {form[3]} —Å–º\n"
            f"  ‚öñÔ∏è –í–µ—Å: {form[4]} –∫–≥\n"
            f"  üìä –ò–ú–¢: {bmi:.1f}\n"
            f"  üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {form[5]}\n"
            f"  üë§ –ü–æ–ª: {form[6]}\n"
            f"  üéÇ –í–æ–∑—Ä–∞—Å—Ç: {form[7]} –ª–µ—Ç\n"
            "‚îÄ" * 30 + "\n"
        )
    await send_long_message(update.message.reply_text, response)


async def show_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = get_all_users()
    if not users:
        await update.message.reply_text("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∫–µ—Ç.")
        return
    response = f"üìä –í—Å–µ –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({len(users)}):\n\n"
    for user in users:
        height_cm = float(user[3])
        weight_kg = float(user[4])
        bmi = weight_kg / ((height_cm / 100) ** 2)
        response += (
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user[1]}\n"
            f"  üìÖ –î–∞—Ç–∞: {user[8]}\n"
            f"  üìè –†–æ—Å—Ç: {user[3]} —Å–º\n"
            f"  ‚öñÔ∏è –í–µ—Å: {user[4]} –∫–≥\n"
            f"  üìä –ò–ú–¢: {bmi:.1f}\n"
            f"  üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user[5]}\n"
            f"  üë§ –ü–æ–ª: {user[6]}\n"
            f"  üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user[7]} –ª–µ—Ç\n"
            "‚îÄ" * 30 + "\n"
        )
    await send_long_message(update.message.reply_text, response)


async def handle_show_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if text.startswith('show all') or text == 'all':
        await show_all(update, context)
    elif text.startswith('show me') or '–º–æ—è' in text:
        await show_me(update, context)
    elif '–º–æ–∏ –∞–Ω–∫–µ—Ç—ã' in text or 'my forms' in text:
        await show_my_forms(update, context)
    else:
        await send_long_message(update.message.reply_text,
                                "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                                "/form - –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É\n"
                                "/show_me - –º–æ—è –∞–Ω–∫–µ—Ç–∞\n"
                                "/my_forms - –≤—Å–µ –º–æ–∏ –∞–Ω–∫–µ—Ç—ã\n"
                                "/show_all - –≤—Å–µ –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                                "/clear_last - —É–¥–∞–ª–∏—Ç—å –º–æ—é –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–Ω–∫–µ—Ç—É\n"
                                "/clear_all - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –º–æ–∏ –∞–Ω–∫–µ—Ç—ã")


async def clear_last(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    deleted = delete_last_user_form(user.id)
    if deleted:
        await update.message.reply_text("–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–Ω–∫–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await update.message.reply_text("–£–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ ‚Äî –∞–Ω–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


async def clear_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    deleted = delete_all_user_forms(user.id)
    if deleted:
        await update.message.reply_text("–í—Å–µ –≤–∞—à–∏ –∞–Ω–∫–µ—Ç—ã —É–¥–∞–ª–µ–Ω—ã.")
    else:
        await update.message.reply_text("–£–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ ‚Äî –∞–Ω–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


